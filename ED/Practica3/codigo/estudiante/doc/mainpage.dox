/*! \mainpage Descripción de la Práctica
# Introducción

Hemos utilizado un TDA Image en el que hemos incluido ciertas operaciones más complejas
que se utilizarán en los distintos mains y ejecutables que hemos creado. A continuación se da
una breve descripción de lo que hace cada programa y cuales deben ser sus parámetros de entrada.

Para guardar y cargar en memoria las distintas imagenes hemos utilizado también las funciones dadas
en el fichero imageIO.h que viene totalmente proporcionado y en el que no hemos hecho cambios.

# Ejecutables
Tomaremos como base la siguiente imágen y veremos ejemplos de las imágenes resultantes de cada ejecutable.
@image html vacas.png

## Negativo:

Calcula el negativo de una imagen mediante el método Image::Negativo

> __negativo__ \<fich_orig\> \<fich_dest\>
@param "<fich_orig>" Fichero de la imagen PGM a la que se va a calcular
@param <fich_dest> Fichero de la imagen PGM resultado de calcular el negativo

@image html invert.png

## Subimagen:

Calcula una subimagen mediante el método Image::Crop, recalcar que mediante
@b nrow y @b ncol se especifica el pixel de la esquina superior izquierda
de la subimagen.

> __subimagen__ \<fich_orig\> \<fich_dest\> \<nrow\> \<ncol\> \<height\> \<width\>
@param "<fich_orig>" Fichero de la imagen PGM a la que se le va a obtener una subimagen
@param "<fich_dest>" Fichero de la imagen PGM recortada como resultado
@param "<nrow>" Fila de inicio de la subimagen
@param "<ncol>" Columna de inicio de la subimagen
@param "<height>" Número de pixeles de altura de la subimagen
@param "<width>" Número de pixeles de ancho de la subimagen

Por ejemplo, en la imágen siguiente mostramos una subimagen extraída con los parámetros:

vacas.pgm cabeza.pgm 85 145 60 80

@image html cabeza.png

## Zoom:

Calcula una subimagen en forma de cuadrado y después le hace un zoom en x2
mediante el método Image::Zoom2X

> __zoom__ \<fich_orig\> \<fich_dest\> \<fila\> \<col\> \<lado\>
@param "<fich_orig>" Fichero de la imagen PGM a la que se le va a calcular un zoom
@param "<fich_dest>" Fichero de la imagen PGM recortada y con zoom como resultado
@param "<nrow>" Fila de inicio de la subimagen
@param "<ncol>" Columna de inicio de la subimagen
@param "<lado>" Número de pixeles de lado de la subimagen

Por ejemplo, en el resultado siguiente mostramos una imágen con zoom x2 extraída con los parámetros:

vacas.pgm zoom.pgm 85 145 60

@image html zoom.png

## Icono:

Calcula un icono, es decir, una imágen de un tamaño muy reducido a partir
de la imágen original usando el método Image::Subsample. La reducción de la imágen original para crear el icono
viene dado por @b factor.

> __icono__ \<fich_orig\> \<fich_dest\> \<factor\>
@param "<fich_orig>" Fichero de la imagen PGM a la que se le va a calcular un icono
@param "<fich_dest>" Fichero de la imagen PGM reducida
@param "<factor>" Factor de reducción

Por ejemplo, en la imágen siguiente mostramos un icono extraída con los parámetros:

vacas.pgm icono.pgm 2

@image html icono.png

## Contraste:

Calcula una imágen con los valores de luminosidad alterados mediante el método Image::AdjustContrast, método que
utiliza la siguiente función:
@image html formula.png
Tendremos en cuenta que dependiendo los valores de sus pixeles se toman distintos valores para la función, veámoslo:
- [0, @b s1] rango de salida si sus valores iniciales están en [0, @b e1]
- [@b s1, @b s2] rango de salida si sus valores iniciales están en [@b e1, @b e2]
- [@b s2, 255] rango de salida si sus valores iniciales están en [@b e2, 255]

Tomaremos esta gráfica como ejemplo:
@image html grafica.png

> __contraste__ \<fich_orig\> \<fich_dest\> \<e1\> \<e2\> \<s1\> \<s2\>
@param "<fich_orig>" Fichero de la imagen PGM a la que se le va a calcular un ajuste de luminosidad
@param "<fich_dest>" Fichero de la imagen PGM cambiada
@param "<e1>" Umbral inferior de la imagen de entrada
@param "<e2>" Umbral superior de la imagen de entrada
@param "<s1>" Umbral inferior de la imagen de salida
@param "<s2>" Umbral superior de la imagen de salida

Por ejemplo, en el resultado siguiente mostramos una imágen en la que se han alterado sus valores
de luminosidad extraída con los parámetros:

vacas.pgm contraste.pgm 64 192 32 224

@image html contraste.png

## Barajar:

Baraja una imagen mediante el método Image::ShuffleRows, es decir, intercambia las filas de la imagen usando
una aplicación biyectiva que asignada a cada fila una nueva fila usando la siguiente función:
@image html formula-modulo.png


> __barajar__ \<fich_orig\> \<fich_dest\>
@param "<fich_orig>" Fichero de la imagen PGM a la que se va a calcular
@param <fich_dest> Fichero de la imagen PGM resultado de barajar las filas

Lo que nos permite pasar de una imágen como la siguiente:
@image html shuffle_9973.png
A una como la siguiente:
@image html barajar.png


\htmlonly
<hr>
\endhtmlonly

Trabajo realizado por:
- Miguel Ángel de la Vega Rodríguez
- Joaquín Avilés de la Fuente
*/


